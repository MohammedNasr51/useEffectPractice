--useEffect:
        لما يبقي عندي حاجه مستنيها تحصل علشان اعمل حاجه ليها علياقة برندرة الكمبوننت 
        ف بستخدم الهوك دي علشان كده زي اني استني فيتش من ا بي اي 
        او استني البروازر يعمل حاجه هي ف الاساس مش من رندرة الكمبوننت بس هتأثر تأثير جزري علي الرندره

    1-اول حاجه بتحط الحاجة اللي انت مستني تأثيرها علشان يأثر علي حاجه ف الريندر يعني ف مثالنا ده احنا مستنيين ال 
     للبرتاوزر يجيب اللوكيشن لليوزر و يرتب الاماكن بعدين يرجع بيهم مترتبين ولما يرجع api
     ستلي الاستيت تاني بالداتا دي بعدين هي كده خلاص جهزت ف الاماكن تبان و تترندر  الاب 
    **very important note :
            not every side effect must use useEffect because its extra execution cycle and we use it only
            to prevent infinte loops when updating a state and when this side effect must execute whin 
            the component executed else you dont need it "like the example fo local storage".
          --if you look at the code you will find that the data retreaved by the localstorage are instantly
            mains that this pace of code executes syncronusly and get the data immediatly so we dont need 
            useEffect here.  

    2-in this ex we try to react with modal declaratively instead of imparativly way and we did the first steps

    3- in the modal ex checking the open method to let us use showModal and close will 
    give us error because it will executed before rendering the whole component and that
    mains that this is a side effect needs the component to render then execute this code.

    4- Dependencies array contains the values of props or states that can cause the component 
    to reexecute again so it will affect the code in the use effect so we should put it in the
    Dependencies array.

    5- if we want to set a timer which will execute a prop or something like that you need to 
    make sure that it renders with its component when reacting with only then you make sure that
    you clear it to prevent unnecessery bugs so we need use effect to do some thing like that.

    6- know that use effect returns a callback function thar will executed right before the 
    component dismount or before the subscuint execution of the effect function it self and
    this will be the method to clear the timer.

7- Using functions in the dependencies array of a useEffect hook can be dangerous because functions are recreated on every render. This means that even if the function's logic hasn't changed, it will be considered a new reference, causing the useEffect to run on every render. This can lead to unnecessary re-renders and potential performance issues.

Here's a more detailed explanation:

Function Recreation: In JavaScript, functions are objects, and they are recreated every time the component renders. This means that even if the function's implementation is the same, its reference is different.

Effect Re-execution: When a function is included in the dependencies array, the useEffect hook will treat it as a new dependency on every render. This will cause the effect to re-run on every render, which can lead to performance issues and unintended side effects.

Unnecessary Re-renders: Since the effect runs on every render, it can cause unnecessary re-renders of the component, leading to a degraded user experience and increased computational load.

To avoid these issues, you can use the useCallback hook to memoize the function, ensuring that it only changes when its dependencies change. This way, the function reference remains stable across renders unless its dependencies change.

import React, { useEffect, useCallback } from 'react';

const MyComponent = ({ someProp }) => {
  const memoizedFunction = useCallback(() => {
    // Function logic here
  }, [someProp]);

  useEffect(() => {
    // Effect logic here
    memoizedFunction();
  }, [memoizedFunction]);

  return <div>My Component</div>;
};


8- so to prevent the recreation of funtions that are dependencies for useEffect we use the
useCallback hook that stores the function in the memory once and call it every time without 
recreating it again 

* it reterst a value refer to the function and takes a dependency array if it has any stats or
context values and so on 

9- because the interval makes the whole confirmation component reexecutes every 10 milly seconds
so we extract the progressbar into a seperate component to optimize the app.